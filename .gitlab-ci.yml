image: registry.gitlab.com/portlandlabs/containers/php/8.2:latest

stages:
  - test
  - build
  - deploy

cache:
  paths:
    - vendor/

# Gitlab provided testing
include:
  - template: SAST.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
#  - template: License-Scanning.gitlab-ci.yml

.ssh_key_setup: &ssh_key_setup
    # Adding support for ssh keys in order to download packages from bitbucket.
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "systems@portlandlabs.com"
    - git config --global user.name "Gitlab CI"

# Test with PHPUnit
test:phpunit:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'external_pull_request_event' || $CI_PIPELINE_SOURCE == 'push'
  cache:
    paths:
      - vendor/
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.cobertura.xml
  before_script:
    - *ssh_key_setup
    - composer install --dev --no-interaction --optimize-autoloader
  script:
    - XDEBUG_MODE=coverage vendor/bin/phpunit --configuration phpunit.xml.dist --log-junit=junit.xml --coverage-text --colors=never --coverage-cobertura=coverage.cobertura.xml

# Test with PHPCS
test:phpcs:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'external_pull_request_event' || $CI_PIPELINE_SOURCE == 'push'
  cache:
    paths:
      - vendor/
  artifacts:
    reports:
      junit: junit.xml
      codequality: phpcs-quality-report.json
  before_script:
    - *ssh_key_setup
    - composer install --no-interaction --optimize-autoloader
  script:
    - >
      vendor/bin/phpcs --basepath=.
      --report=code --report-junit=junit.xml --report-\\Micheh\\PhpCodeSniffer\\Report\\Gitlab=phpcs-quality-report.json 
      phpcs.xml.dist tests public/application

build:tar:
  stage: build
  artifacts:
    paths:
      - release.tar.gz
  rules:
    - if: $CI_COMMIT_BRANCH =~ /(develop|master)/
  before_script:
    - *ssh_key_setup
    # Install production dependencies
    - composer install --no-dev --no-interaction --optimize-autoloader
  script:
    # Delete anything we don't want to include in the tar
    - rm -rf tests resources
    - tar -zcvf /builds/release.tar.gz .
    # Move the built tar to the correct location. This also verifies the file was created.
    - mv /builds/release.tar.gz $CI_PROJECT_DIR/release.tar.gz

.job_template: &deploy
  stage: deploy
  before_script:
    - apt-get update && apt-get install gettext-base
    # Write GitLab Variables into the .codedeployvars file
    - tar -xzf release.tar.gz ./.codedeployvars && mv .codedeployvars .codedeployvars.template
    - envsubst < .codedeployvars.template > .codedeployvars
    # Update appspec with environment variables
    - tar -xzf release.tar.gz ./appspec.yml && mv appspec.yml appspec.yml.template
    - envsubst < appspec.yml.template > appspec.yml
    # Pack the files back into the tar
    - gunzip release.tar.gz
    - tar -rf release.tar ./.codedeployvars
    - tar -rf release.tar appspec.yml
    - gzip release.tar
  script:
    - deploy release.tar.gz

deploy:stage:
  <<: *deploy
  environment:
    name: Stage deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'develop'

deploy:production:
  <<: *deploy
  environment:
    name: Production deploy
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master'
